#!/usr/bin/env php
<?php

$loader = require("packages/autoload.php");

use Strukt\Fs;
use Strukt\Event;
use Strukt\Ref;
use Strukt\Process;
use Strukt\Cmd;

function event(string $name){

    if(!Cmd::exists($name))
        exit(sprintf("Task %s does not exists!", $name));

    return Event::create(Cmd::get($name));    
}

function go(string $name, ...$args){

    return Cmd::exec($name, $args);  
}

function watch($dir, \Closure $callback, $wait=1){

    $currHash = null;
    $prevHash = null;

    $currPaths = [];
    $prevPaths = [];

    $evt = Event::create($callback);

    while(true){

        clearstatcache();
        sleep($wait);

        if(Fs::isFile($dir))
            $files[] = $dir;
        else if(Fs::isPath($dir))
            $files = Fs::lsr($dir);
        else
            exit("Unknown file or path!");

        while($path = current($files)){

            $currPaths[$path] = md5_file($path);

            if(empty(next($files)))
                break;
        }

        $currHash = md5(implode("", $currPaths));

        $diffPaths = array_keys(array_diff($currPaths, $prevPaths));

        if($currHash!=$prevHash && !is_null($prevHash))
            $evt->apply($diffPaths)->exec();

        $prevHash = $currHash;
        $prevPaths = $currPaths;
    }
}

function task(string $name, Closure $func){

    if(Cmd::exists($name))
        exit(sprintf("Task [%s] already exists!\n", $name));

    Cmd::add($name, $func);
}

function writeln($line){

    echo sprintf("%s\n", $line);
}

function run(string $cmd, \Closure $callback = null, $input = null){

    $processes = Process::run([$cmd], $callback);

    $process = $processes->current();

    if(!is_null($input)){

        $process->write($input);
        $process->closeInput();
    }

    return array(

        $process->read(),
        $process->error(),
    );
}

if(!Fs::isFile("tasker.php"))
    Fs::touchWrite("tasker.php", 
"<?php

/**
 * Sample task
 */
task('test', function(){
    
    writeln('Hello world');
});");

/**
 * Tasker version
 */
task("version", function(){

    echo(sprintf("\n %s\n\n", "Tasker v1.0.1-alpha"));
});

/**
 * List commands
 */
task("list", function(){

    exit(sprintf("\n%s\n\n", implode("\n", array_map(function($name){

        return Cmd::doc($name);

    }, Cmd::ls()))));
});

include("tasker.php");

$cmd = next($_SERVER["argv"]);

if(!empty($cmd)){

    if(Cmd::exists($cmd)){

        $task = Cmd::get($cmd);

        $rfunc = Ref::func($task)->getRef();
        $nfunc_params = $rfunc->getNumberOfParameters();

        $event = event($cmd);

        if($nfunc_params > 0){

            $nparams = count($_SERVER["argv"]) - $nfunc_params;

            $args = array_splice($_SERVER["argv"], $nparams);

            $event = $event->applyArgs($args);
        }

        $event->exec();

        exit();
    }
    
    exit("Tasker could not find command!\n");
}

exit("No command indicated!\n");